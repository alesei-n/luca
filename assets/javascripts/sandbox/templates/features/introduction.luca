%h2 Introduction
%p Luca.JS was developed after a year of doing battle with Backbone.js developing large single page applications which acted as first class clients for the REST API which served our mobile apps.
%p Backbone.js, for anyone who has developed a fair share of thick client apps in Javascript, is a godsend.  Their minimialist philosophy in providing you just what you need to be able to build things really appeals to me and addressed the shortcomings in much larger frameworks such as ExtJS, SproutCoure, which provided you with too much and made it harder to develop unique looking public facing apps. However, for a lot of apps, especially for non-public facing, internal tools, it was almost too minimalist, and there was a lot of boilerplate code that needed to be written.
%p Luca.js attempts to address a lot of these shortcomings by encompassing a lot of common patterns and what I consider to be best practices.  It provides an augmented Backbone.View and Backbone.Collection class, many utilities and manager components.
%h3 Containers
%p One important feature of Luca is the concept of Container Views.  These are views which are responsible for containing several other views, and their role is generating the structural DOM elements for you to be able to lay out these child views and show, hide, display or activate them as needed.
%p  Luca adheres to the Backbone.js party line mostly, in staying very minimalist.  You can use Backbone and Luca interchangeably in almost every case.
%h3 Components
%p In addition to providing you with building blocks, I have included several Components which are built using Luca.Views, Luca.Collections and the various types of containers.  These are things like a Grid which is a scrollable table automatically generated from a collection.  A Form component which generates a form for you based on a given model, and handles a lot of tasks for you.
%h3 Twitter Bootstrap 2.0 Integration
%p Twitter and Backbone play very nicely together due to their philosophy of providing you with only the bare minimum pieces you need, and allowing you to choose which to use.  Twitter is almost a pure CSS library, and Backbone is a way of structuring your code and handling DOM events and integration with your data persistence strategies.  They overlap very little, if at all.  Because they solve two different problems, and impose very little requirements on the developer, I have decided to give you the option to use both of them simultaneously.